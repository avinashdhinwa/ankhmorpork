---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sonarr
  namespace: multimedia
  labels:
    app.kubernetes.io/name: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarr
  serviceName: sonarr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarr
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "Europe/Berlin"
        name: sonarr
        image: linuxserver/sonarr:preview
        imagePullPolicy: Always
        ports:
          - containerPort: 8989
            name: http-sonarr
        readinessProbe:
          tcpSocket:
            port: http-sonarr
          failureThreshold: 5
          timeoutSeconds: 10
        volumeMounts:
          - mountPath: /config
            name: config
          - mountPath: /tv
            name: data
          - mountPath: /download/completed
            name: downloads
        resources:
          requests:
            memory: 280Mi
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: tv
      - name: downloads
        persistentVolumeClaim:
          claimName: torrents
      nodeSelector:
        kubernetes.io/arch: "amd64"
        # kubernetes.io/hostname: "node01"
        # storage.infra/replicated: "true"
      tolerations: []
  volumeClaimTemplates:
  - metadata:
      name: config
      namespace: multimedia
      annotations:
        volume.beta.kubernetes.io/storage-class: "external-nfs"
    spec:
      storageClassName: "external-nfs"
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 100Mi
